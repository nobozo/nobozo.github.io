[[_branch_management]]
=== Branch Management

(((branches, managing)))
Now that you've created, merged, and deleted some branches, let's look at some branch
management techniques that come in handy when you begin using branches regularly.

`git branch` does more than just create and delete branches.(((git commands, branch)))
If you run it with no arguments, you see a simple listing of your branches.

[source,console]
----
$ git branch
  iss53
* master
  testing
----

The `*` character that prefixes `master` indicates the branch that you currently have checked out (i.e.,
the branch that `HEAD` points to). This means that if you commit now, `master` moves forward.
To see the last commit on each branch, run `git branch -v`.

[source,console]
----
$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes
----

The `--merged` and `--no-merged` flags are useful for filtering this list to contain only
branches that you have or haven't yet merged into the branch you're currently on.
To see which branches are already merged into the branch you're on, run `git branch --merged`.

[source,console]
----
$ git branch --merged
  iss53
* master
----

Because you already merged in `iss53` earlier, you see it in the output.
Branches in this list without the `*` in front of them are generally fine to delete
by running `git branch -d`. You've already merged them into another branch,
so you're not going to lose anything.

To see all the branches that contain changes you haven't yet merged in, run `git branch --no-merged`.

[source,console]
----
$ git branch --no-merged
  testing
----

Any branches it shows contain changes that haven't been merged in yet.
Trying to delete them with `git branch -d` fails.

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

If you really do want to delete the branch and lose any unmerged changes, you can force the deletion with the `-D` flag, as the helpful message points out.

The options described above, `--merged` and `--no-merged`, if not given a commit or
branch name as an argument, show what is, respectively, merged or not merged into your
_current_ branch.

You can always provide an additional argument to show the merge state with respect
to some other branch without checking out that other branch first. For example, to show
what isn't merged into `master`
[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
