==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar is a DVCS tool much like Git, and as a result it's pretty straightforward to convert a Bazaar
repository into a Git one.
To accomplish this, install the `bzr-fastimport` plugin.

===== Getting the bzr-fastimport plugin

The procedure for installing the `bzr-fastimport` plugin is different on UNIX-like operating systems than
on Windows. On Unix-like operating systems, it's best to install the `bzr-fastimport` package which will
also install all the required dependencies.

For example, on a Debian-based OS, run

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

On RHEL-based OSs, run

[source,console]
----
$ sudo yum install bzr-fastimport
----

On Fedora, since release 22, run

[source,console]
----
$ sudo dnf install bzr-fastimport
----

If the package isn't available, install it as a plugin.

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins     # creates the necessary folders for the plugins
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport   # imports the fastimport plugin
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # installs the plugin
----

For this plugin to work, you also need the `fastimport` Python module.
Install it by running the following commands:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----
If the module isn't available, download it from https://pypi.python.org/pypi/fastimport/.

On Windows `bzr-fastimport` is automatically installed with the standalone version of Python
using the default installation options.

At this point, the way to import a Bazaar repository differs according to whether you have
a single branch or you're working with a repository with several branches.

===== Project with a single branch

First, `cd` to the directory that contains your Bazaar repository and initialize the Git repository.

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Now, simply export your Bazaar repository and convert it into a Git repository using the following command:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Your Git repository is built in anywhere from a few seconds to a few minutes,
depending on the size of your project.

===== A project with a main branch and a working branch

You can also import a Bazaar repository that contains branches.
Let's suppose that you have two branches -- the main branch (myProject.trunk) and the working branch (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Create the Git repository and `cd` into it.

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Pull the master branch into Git.

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Pull the working branch into Git.

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Now `git branch` shows `master` as well as `work`.
Check the logs to make sure the import is complete. Then remove `marks.bzr` and `marks.git`.

===== Synchronizing the staging area

Whatever the number of branches you had and the import method you used,
your staging area is not synchronized with `HEAD`. Neither is your working directory.
Correct this by running

[source,console]
----
$ git reset --hard HEAD
----

===== Ignoring the files that were ignored with .bzrignore

Now let's have a look at the files to ignore.
The first thing to do is to rename `.bzrignore` to `.gitignore`.

Finally, create a commit that contains this modification.

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Sending your repository to the server

Here we are! Now push the repository onto its new home server.

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Your Git repository is ready to use.
